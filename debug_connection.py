#!/usr/bin/env python3
"""
Script para testar conex√£o com banco EasyPanel
Execute este script para verificar se a conex√£o est√° funcionando
"""

import os
import sys
from sqlalchemy import create_engine, text
import traceback

def test_easypanel_connection():
    """Testa a conex√£o com o banco EasyPanel"""
    
    # Dados de conex√£o EasyPanel
    config = {
        'host': 'easypanel.pontocomdesconto.com.br',
        'port': 33070,
        'user': 'erp_admin',
        'password': '8de3405e496812d04fc7',
        'database': 'erp'
    }
    
    print("üîß TESTE DE CONEX√ÉO - EASYPANEL MYSQL")
    print("="*50)
    print(f"Host: {config['host']}")
    print(f"Porta: {config['port']}")
    print(f"Usu√°rio: {config['user']}")
    print(f"Banco: {config['database']}")
    print("="*50)
    
    # Montar URL de conex√£o
    db_url = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}:{config['port']}/{config['database']}"
    
    try:
        print("üîå Tentando conectar...")
        
        # Criar engine
        engine = create_engine(
            db_url,
            pool_timeout=30,
            pool_recycle=3600,
            pool_pre_ping=True,
            echo=True,  # Mostrar queries SQL
            connect_args={
                'charset': 'utf8mb4',
                'connect_timeout': 60,
                'read_timeout': 30,
                'write_timeout': 30
            }
        )
        
        # Testar conex√£o
        with engine.connect() as connection:
            print("‚úÖ Conex√£o estabelecida!")
            
            # Teste b√°sico
            result = connection.execute(text("SELECT 1 as test"))
            test_value = result.fetchone()[0]
            print(f"‚úÖ Teste b√°sico: {test_value}")
            
            # Verificar vers√£o MySQL
            result = connection.execute(text("SELECT VERSION() as version"))
            version = result.fetchone()[0]
            print(f"‚úÖ Vers√£o MySQL: {version}")
            
            # Listar tabelas
            result = connection.execute(text("SHOW TABLES"))
            tables = [row[0] for row in result.fetchall()]
            print(f"üìä Tabelas encontradas ({len(tables)}): {', '.join(tables) if tables else 'Nenhuma'}")
            
            # Verificar charset
            result = connection.execute(text("SELECT @@character_set_database as charset"))
            charset = result.fetchone()[0]
            print(f"‚úÖ Charset: {charset}")
            
            print("\nüéâ CONEX√ÉO COM EASYPANEL OK!")
            return True
            
    except Exception as e:
        print(f"\n‚ùå ERRO NA CONEX√ÉO: {e}")
        print("\nüîç Detalhes do erro:")
        traceback.print_exc()
        
        print("\nüí° Poss√≠veis solu√ß√µes:")
        print("1. Verificar se o banco est√° online no EasyPanel")
        print("2. Verificar credenciais (usu√°rio/senha)")
        print("3. Verificar se a porta 33070 est√° acess√≠vel")
        print("4. Verificar configura√ß√£o de firewall")
        
        return False

def test_with_flask_config():
    """Testa usando a configura√ß√£o do Flask"""
    
    print("\n" + "="*50)
    print("üîß TESTE COM CONFIGURA√á√ÉO DO FLASK")
    print("="*50)
    
    try:
        # Definir vari√°veis de ambiente
        os.environ['DB_HOST'] = 'easypanel.pontocomdesconto.com.br'
        os.environ['DB_PORT'] = '33070'
        os.environ['DB_USER'] = 'erp_admin'
        os.environ['DB_PASSWORD'] = '8de3405e496812d04fc7'
        os.environ['DB_NAME'] = 'erp'
        
        # Importar config
        from config import config
        
        # Usar configura√ß√£o externa
        config_class = config['external']
        
        # Criar inst√¢ncia de configura√ß√£o
        app_config = config_class()
        
        db_uri = app_config.SQLALCHEMY_DATABASE_URI
        print(f"üìä Database URI: {db_uri}")
        
        # Testar com a configura√ß√£o
        engine = create_engine(
            db_uri,
            **app_config.SQLALCHEMY_ENGINE_OPTIONS
        )
        
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 'Flask Config OK' as test"))
            message = result.fetchone()[0]
            print(f"‚úÖ {message}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro com config Flask: {e}")
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal de teste"""
    
    print("üè¢ ERP CORRIGINDO √Ä ROTA - TESTE DE CONEX√ÉO")
    print("="*60)
    
    # Teste direto
    direct_ok = test_easypanel_connection()
    
    # Teste com Flask config
    flask_ok = test_with_flask_config()
    
    print("\n" + "="*60)
    print("üìã RESULTADO DOS TESTES")
    print("="*60)
    print(f"Conex√£o direta: {'‚úÖ OK' if direct_ok else '‚ùå FALHOU'}")
    print(f"Config Flask: {'‚úÖ OK' if flask_ok else '‚ùå FALHOU'}")
    
    if direct_ok and flask_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("üí° Sua aplica√ß√£o deve funcionar no EasyPanel")
        return True
    else:
        print("\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("üí° Verifique a configura√ß√£o antes de fazer deploy")
        return False

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã Teste interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erro cr√≠tico: {e}")
        traceback.print_exc()
        sys.exit(1)