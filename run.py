#!/usr/bin/env python3
"""
Script principal corrigido para iniciar a aplica√ß√£o Flask
"""
import os
import sys
from flask_migrate import Migrate

def get_environment():
    """Determina o ambiente baseado nas vari√°veis dispon√≠veis"""
    
    # Verificar se √© Railway
    if (os.getenv('RAILWAY_DB_HOST') and 
        os.getenv('RAILWAY_DB_PASSWORD')):
        return 'railway'
    
    # Verificar URL do banco
    database_url = os.getenv('DATABASE_URL', '')
    if 'railway' in database_url or 'rlwy.net' in database_url:
        return 'railway'
    
    # Verificar se tem arquivo de configura√ß√£o espec√≠fico
    if os.path.exists('config.py'):
        return 'development'
    
    # Default
    return 'development'

def ensure_database_exists():
    """Garante que o banco de dados existe e tem a estrutura necess√°ria"""
    
    environment = get_environment()
    
    if environment == 'development':
        # Para SQLite, garantir que o diret√≥rio instance existe
        os.makedirs('instance', exist_ok=True)
        
        db_file = 'instance/app.db'
        if not os.path.exists(db_file):
            print(f"üîß Banco {db_file} n√£o existe, ser√° criado automaticamente")
            
        return True
    else:
        # Para outros ambientes (Railway), assumir que o banco existe
        return True

def create_admin_safely(app):
    """Cria usu√°rio admin de forma segura"""
    
    try:
        with app.app_context():
            from app import db
            from app.models.user import User
            
            # Verificar se as tabelas existem
            try:
                # Tentar uma query simples para verificar se a tabela existe
                User.query.first()
                print("‚úÖ Tabela 'users' encontrada")
                
            except Exception as table_error:
                print(f"üîß Tabela 'users' n√£o encontrada, criando estrutura...")
                
                try:
                    # Criar todas as tabelas
                    db.create_all()
                    print("‚úÖ Estrutura do banco criada!")
                    
                except Exception as create_error:
                    print(f"‚ùå Erro ao criar estrutura: {create_error}")
                    return False
            
            # Verificar/criar admin
            admin = User.query.filter_by(username='admin').first()
            
            if admin:
                print("‚úÖ Usu√°rio admin j√° existe!")
                
                # Verificar se a senha est√° funcionando
                if not admin.password_hash:
                    print("üîß Admin sem senha, corrigindo...")
                    admin.set_password('admin123')
                    admin.perfil = 'admin'
                    admin.ativo = True
                    db.session.commit()
                    print("‚úÖ Senha do admin corrigida!")
                    
            else:
                print("üîß Criando usu√°rio admin...")
                
                admin = User(
                    username='admin',
                    email='admin@corrigindoarota.com.br',
                    perfil='admin',
                    ativo=True
                )
                admin.set_password('admin123')
                
                db.session.add(admin)
                db.session.commit()
                print("‚úÖ Usu√°rio admin criado!")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro geral ao criar admin: {e}")
        
        # Fallback: tentar criar via SQL direto (s√≥ para SQLite)
        try:
            environment = get_environment()
            if environment == 'development':
                print("üîß Tentando fallback com SQLite...")
                return create_admin_sqlite_fallback()
            else:
                return False
                
        except Exception as fallback_error:
            print(f"‚ùå Fallback tamb√©m falhou: {fallback_error}")
            return False

def create_admin_sqlite_fallback():
    """Fallback para criar admin diretamente no SQLite"""
    
    try:
        import sqlite3
        from werkzeug.security import generate_password_hash
        
        db_file = 'instance/app.db'
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # Criar tabela se n√£o existir
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username VARCHAR(80) UNIQUE NOT NULL,
                email VARCHAR(120) UNIQUE NOT NULL,
                password_hash VARCHAR(255),
                perfil VARCHAR(20) DEFAULT 'user',
                ativo BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME
            )
        """)
        
        # Verificar se admin existe
        cursor.execute("SELECT id FROM users WHERE username = 'admin'")
        if not cursor.fetchone():
            password_hash = generate_password_hash('admin123')
            cursor.execute("""
                INSERT INTO users (username, email, password_hash, perfil, ativo)
                VALUES ('admin', 'admin@corrigindoarota.com.br', ?, 'admin', 1)
            """, (password_hash,))
            print("‚úÖ Admin criado via SQLite!")
        else:
            print("‚úÖ Admin j√° existe no SQLite!")
        
        conn.commit()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Falha no fallback SQLite: {e}")
        return False

def initialize_app():
    """Inicializa a aplica√ß√£o Flask"""
    
    # Determinar ambiente
    environment = get_environment()
    print(f"üåç Ambiente detectado: {environment}")
    
    # Garantir que o banco existe
    if not ensure_database_exists():
        print("‚ùå Falha ao configurar banco de dados!")
        return None
    
    # Importar e criar app
    try:
        from app import create_app, db
        
        app = create_app(environment)
        
        # Inicializar Flask-Migrate
        migrate = Migrate(app, db)
        
        print("‚úÖ Aplica√ß√£o Flask criada com sucesso!")
        
        # Mostrar blueprints registrados
        blueprints = list(app.blueprints.keys())
        print(f"üìã Blueprints registrados ({len(blueprints)}): {', '.join(blueprints)}")
        
        return app
        
    except Exception as e:
        print(f"‚ùå Erro ao criar aplica√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return None

def run_development_server(app):
    """Executa o servidor de desenvolvimento"""
    
    port = int(os.environ.get('PORT', 5000))
    host = os.environ.get('HOST', '0.0.0.0')
    
    print("="*60)
    print("üöÄ INICIANDO SERVIDOR DE DESENVOLVIMENTO")
    print("="*60)
    print(f"üåç Ambiente: {get_environment()}")
    print(f"üîó URL: http://localhost:{port}")
    print(f"üë§ Login: admin")
    print(f"üîê Senha: admin123")
    print("="*60)
    print("üí° Pressione Ctrl+C para parar o servidor")
    print("="*60)
    
    try:
        app.run(
            host=host,
            port=port,
            debug=True,
            use_reloader=False,  # Evitar recarregamento duplo
            threaded=True
        )
    except KeyboardInterrupt:
        print("\nüõë Servidor parado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro no servidor: {e}")

def run_production_server(app):
    """Executa o servidor de produ√ß√£o"""
    
    port = int(os.environ.get('PORT', 8000))
    host = os.environ.get('HOST', '0.0.0.0')
    
    print("="*60)
    print("üöÄ INICIANDO SERVIDOR DE PRODU√á√ÉO")
    print("="*60)
    print(f"üîó Host: {host}:{port}")
    print("="*60)
    
    try:
        app.run(
            host=host,
            port=port,
            debug=False,
            use_reloader=False,
            threaded=True
        )
    except Exception as e:
        print(f"‚ùå Erro no servidor: {e}")

def main():
    """Fun√ß√£o principal"""
    
    print("üîß SISTEMA ERP - CORRIGINDO √Ä ROTA")
    print("="*50)
    
    # Inicializar aplica√ß√£o
    app = initialize_app()
    if not app:
        print("‚ùå Falha cr√≠tica na inicializa√ß√£o!")
        return False
    
    # Configurar banco e admin
    admin_created = create_admin_safely(app)
    if not admin_created:
        print("‚ö†Ô∏è  Aviso: Problemas na cria√ß√£o do admin, mas continuando...")
    
    # Determinar tipo de servidor
    environment = get_environment()
    
    if environment == 'development':
        run_development_server(app)
    else:
        run_production_server(app)
    
    return True

if __name__ == '__main__':
    try:
        success = main()
        if not success:
            print("\n‚ùå Sistema encerrado com erros!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã Sistema encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)